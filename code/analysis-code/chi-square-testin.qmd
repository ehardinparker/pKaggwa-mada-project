---
title: "Predicting of the pulmunary TB cases , Uganda"
author: "Patrick Kaggwa"
date: "12/03/2024"
output: html_document
---

```{r}
# load the relevant tidymodels libraries
library(here) #for data loading/saving
library(tidyverse) #for data management
library(tidymodels) #for data modeling
library(skimr) #for variable summaries
library(broom.mixed) #for converting bayesian models to tidy tibbles
library(glmnet) #for lasso models
library(doParallel) #for parallel backend for tuning processes
library(ranger) #for random forest models
library(rsample)
library(vcd)# Load the vcd package for Cramer's V calculation
```

The purpose of this check with variables are related to the outcome and will run chi squares to check the p values

## Load the data.

```{r}
#Path to data. Note the use of the here() package and not absolute paths
data_location <- here::here("data","processed-data","madaproject.rds")
#load data
# Loading the needed dataset
madaproject <- readRDS(data_location)

```

Before I start doing some model building I split the data into training and testing datasets.

```{r}
colnames(madaproject)
```

```{r}


# Selecting the relevant columns
relevant_columns <- c("Gender", "Age", "oxygencons", "Asthma", "Smoke", 
                      "Alcohol", "feverstatus", "Weightloss", "coughstatus", 
                      "Sputumproduction", "BloodinSputum", "cxrconclusion_chestxray", 
                      "homefuel", "hivstatus", "tb")

# Subset the data with relevant columns
relevant_data <- madaproject[, relevant_columns]

# Convert 'tb' to a factor if it's not already
relevant_data$tb <- factor(relevant_data$tb)

# Perform chi-square test for each variable against 'tb'
chi_square_results <- lapply(names(relevant_data)[-which(names(relevant_data) == "tb")], 
                              function(var) {
                                  chisq.test(relevant_data[[var]], relevant_data$tb)
                              })

# Print the results
names(chi_square_results) <- names(relevant_data)[-which(names(relevant_data) == "tb")]
chi_square_results

```

Now I will create a dataset that variables whose p value are less than 0.05

```{r}
# Selecting the variables with p- values less than 0.05
data2 <- madaproject %>% select( "oxygencons", "Asthma", 
                       "feverstatus", "Weightloss", 
                       "BloodinSputum", "cxrconclusion_chestxray", 
                      "homefuel", "hivstatus", "tb")

colnames(data2)
```

Running again chisquare test among each variable
```{r}

# contingency tables and perform chi-square tests for each pair of variables

# Create an empty list to store results
results <- list()

# Iterate through each pair of variables
for (i in 1:(length(madaproject) - 1)) {
  for (j in (i + 1):length(data2)) {
    # Create contingency table
    contingency_table <- table(madaproject[[i]], data2[[j]])
    
    # Perform chi-square test
    chi_square_result <- chisq.test(contingency_table)
    
    # Calculate Cramer's V
    cramer_v <- assocstats(contingency_table)$cramer
    
    # Store results in the list
    results[[paste(names(data2)[i], names(madaproject)[j], sep="_vs_")]] <- list(chi_square_result = chi_square_result, cramer_v = cramer_v)
  }
}

# Print results
for (result_name in names(results)) {
  cat("Results for", result_name, ":\n")
  print(results[[result_name]])
  cat("\n")
}

```

```{r}
# Load necessary libraries
library(vcd)
library(flextable)

# Create an empty data frame to store results
results_df <- data.frame(
  Variable1 = character(),
  Variable2 = character(),
  ChiSquarePValue = numeric(),
  CramersV = numeric(),
  stringsAsFactors = FALSE
)

# Iterate through each pair of variables
for (i in 1:(length(madaproject) - 1)) {
  for (j in (i + 1):length(madaproject)) {
    # Create contingency table
    contingency_table <- table(madaproject[[i]], madaproject[[j]])
    
    # Perform chi-square test
    chi_square_result <- chisq.test(contingency_table)
    
    # Calculate Cramer's V
    cramer_v <- assocstats(contingency_table)$cramer
    
    # Store results in the data frame, rounding values to three decimal places
    results_df <- rbind(results_df, 
                        data.frame(
                          Variable1 = names(madaproject)[i],
                          Variable2 = names(madaproject)[j],
                          ChiSquarePValue = sprintf("%.3f", chi_square_result$p.value),
                          CramersV = sprintf("%.3f", cramer_v)
                        )
    )
  }
}

# Create a flextable object
ft <- flextable(results_df)


# Print the flextable
ft

```

Now I have only 9 predictors
I will now save the dataset

```{r}
# Save finaldata as RDS
save_data_location <- here::here("data","processed-data","data2.rds")
saveRDS(data2, file = save_data_location)
```
